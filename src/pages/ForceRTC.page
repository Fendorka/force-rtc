<apex:page controller="ForceRTC" sidebar="false" showheader="true" standardstylesheets="false">

<html>
<head>

  <title>Force RTC</title>

    <apex:slds />
    <style>
        html, body {
            width: 100%;
            height; auto;
            background: #B0C4DF;
        }
        h1 {
            text-align: center;
        }
        #remoteVideo {
            max-width: 100%;
        }
        /* todo Show full local as a mirror, then on call add class that animates to this */
        #localVideo {
            z-index: 999;
            position: absolute;
            width: 84.5%;
            height: 17%;
            margin-top: 26%;
        }
        .videos {
            text-align: center;
            margin-top: 2rem;
        }
        .actions {
            text-align: center;
            margin-top: 2rem;
        }
        .hide {
            display: none !important;
        }
    </style>
</head>

<body>

<div class="toaster"></div>

<div class="videos">

    <video id="localVideo" title="You" autoplay="true" muted="true"></video>

    <video id="video2" autoplay="true"></video><br />

</div>

<button id="BUTTON_createOffer">Create Connection</button>

<textarea id="offer" placeholder="Paste offer here"></textarea><br />

Answer: <textarea id="answer"></textarea>

<br />

<div id="div"></div>

Chat: <input id="chat"></input><br />

<!--     
        <video id="localVideo" autoplay="true" class="hide"></video>
        <video id="remoteVideo" autoplay="true"></video>

    <div class="actions">
        <button id="startButton" class="slds-button slds-button_neutral">Start</button>
        <button id="callButton" class="slds-button slds-button_success">Call</button>
        <button id="hangupButton" class="slds-button slds-button_destructive">Hang Up</button>
    </div> -->

</body>
    <!-- shim to insulate apps from spec changes and prefix differences.  -->
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

  <script>
    'use strict()'
/*
    const startButton = document.getElementById('startButton')
    const callButton = document.getElementById('callButton')
    const hangupButton = document.getElementById('hangupButton')

    callButton.disabled = true
    hangupButton.disabled = true
    startButton.onclick = start
    callButton.onclick = call
    hangupButton.onclick = hangup

    let startTime
    const localVideo = document.getElementById('localVideo')
    const remoteVideo = document.getElementById('remoteVideo')
*/
    const localVideo = document.getElementById('localVideo')
    const video2 = document.getElementById('video2')
    
    const buttons = {}
    buttons.offer = document.getElementById('offer')
    buttons.createOffer = document.getElementById('BUTTON_createOffer')
    buttons.createOffer.onclick = createOffer

    const server = { urls: "stun:stun.l.google.com:19302" };

    const enterPressed = e => e.keyCode == 13
    const log = msg => div.innerHTML += `<p>${msg}</p>`

    const getMedia = navigator.mediaDevices.getUserMedia({video:true, audio:true})
        .then(stream => pc.addStream(localVideo.srcObject = stream)).catch(log)

    const haveAnswer = (conn) => {
        
        answer.disabled = true
        const desc = new RTCSessionDescription({ type:"answer", sdp:conn.jamiesmith__Answer__c })
        pc.setRemoteDescription(desc)
            .then(x => mkToast('Connected', 'success'))
            .catch(x => mkToast(x, 'warning'))
    }

    let numOfPoles = 0
    const poleForAnswer = () => {
        numOfPoles++
        console.log('polling ', numOfPoles)
        const getConn = new Promise((resolve, reject) =>
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ForceRTC.getConnection}',
                Id,
                (result, e) => e.status ? resolve(result) : reject(e.message)))
        .then(conn => conn.jamiesmith__Answer__c 
            ? haveAnswer(conn) 
            : setTimeout(poleForAnswer(), 20000))
            
        .catch(x => mkToast(x, 'warning'))
    }


    {   // if params, there's a connection made already so get it
        const Id = new URL(location.href).searchParams.get("id")
        if(Id){

            buttons.createOffer.disabled = true
            
            const getConn = new Promise((resolve, reject) =>
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ForceRTC.getConnection}',
                    Id,
                    (result, e) => e.status ? resolve(result) : reject(e.message))
            ).then(conn => {

                mkToast('Found Connection. Joining...', 'success')
                console.log(conn)

                // have offer in conn
                buttons.createOffer.disabled = true
                buttons.createOffer.style.display = 'none'

                //Fix up the _offer
                let _offer = conn.jamiesmith__Offer__c
                const spot = _offer.indexOf('webrtc-datachannel')
                const datachannel = _offer.substring(spot, _offer.length)
                _offer = _offer.substring(0, spot-1)
                _offer = `${_offer}\n${datachannel}\n\n`

                console.log(_offer)
                
                // set _offer
                const desc = new RTCSessionDescription({ type:"offer", sdp:_offer })
                pc.setRemoteDescription(desc)
                    .then(() => pc.createAnswer()).then(d => pc.setLocalDescription(d))
                    .catch(error => mkToast(error, 'error'))
                
                pc.onicecandidate = e => {

                    if (e.candidate){
                        return
                    }

                    answer.focus()
                    answer.value = pc.localDescription.sdp
                    answer.select()
                    // Set Answer for Peer's pole to pickup
                    const setAnswer = new Promise((resolve, reject) =>
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ForceRTC.setAnswer}',
                        Id,
                        pc.localDescription.sdp,
                        (result, e) => e.status ? resolve(result) : reject(e.message)))
                    .then(x => mkToast('Set Answer. Waiting for peer\'s connection...'))
                }
                
            }).catch(error => mkToast(error, 'error'))
        }
    }


    
    const pc = new RTCPeerConnection({ iceServers: [server] })
    pc.onaddstream = e => video2.srcObject = e.stream
    
    let dc // data channel
    pc.ondatachannel = e => dcInit(dc = e.channel)
    pc.oniceconnectionstatechange = e => log(pc.iceConnectionState)


    function dcInit() {
        
        dc.onopen = () => mkToast('Chat available', 'info')
        dc.onmessage = e => log(e.data)
    }

    function createOffer() {
        
        mkToast('Creating connection', 'info')

        buttons.createOffer.disabled = true
        buttons.createOffer.style.display = 'none'

        dcInit(dc = pc.createDataChannel("chat"))

        getMedia.then(() => pc.createOffer())
            .then(d => pc.setLocalDescription(d))
            .catch(log);
            
        pc.onicecandidate = e => {

            if(e.candidate){
                return
            }

            offer.value = pc.localDescription.sdp
            offer.select()
            answer.placeholder = 'Paste answer here'

            const mkConn = new Promise((resolve, reject) =>
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ForceRTC.mkConnection}',
                    pc.localDescription.sdp,
                    (result, e) => e.status ? resolve(result) : reject(e.message))
            ).then(x => {

                mkToast('Created Connection &amp; Set Offer', 'success')
                console.log(x)
                console.log(location);
                
                if(pc.signalingState != "have-local-offer"){
                    console.log('warn: ', pc.signalingState)
                    //return 
                }
            }).catch(error => mkToast(error, 'error'))
        }
    }

    offer.onkeypress = e => {

        if (!enterPressed(e) || pc.signalingState != "stable"){
            return
        }

        buttons.createOffer.disabled = true
        offer.disabled = true

        //const desc = new RTCSessionDescription({ type:"offer", sdp:offer.value })
        pc.setRemoteDescription(new RTCSessionDescription({ type:"offer", sdp:offer.value }))
            .then(() => pc.createAnswer()).then(d => pc.setLocalDescription(d))
            .catch(log)
        
        pc.onicecandidate = e => {

            if (e.candidate){
                return
            }

            answer.focus()
            answer.value = pc.localDescription.sdp
            answer.select()
        }
    }


    answer.onkeypress = e => {
        
        if(!enterPressed(e) || pc.signalingState != "have-local-offer"){
            return
        }

        answer.disabled = true;
        const desc = new RTCSessionDescription({ type:"answer", sdp:answer.value });
        pc.setRemoteDescription(desc)
            .then(x => console.log(x))
            .catch(log)
    }

    chat.onkeypress = e => {
        
        if (!enterPressed(e)){
            return
        }

        dc.send(chat.value)
        log(chat.value)
        chat.value = ''
    }





    // type may be success || warning || info ; el = el to append toast to 
    const mkToast = (msg, type) => {
        
        const cont = document.createElement('div')
        const toaster = document.querySelector('.toaster')

        cont.innerHTML =  `<div style="height: 4rem;">
            <div class="slds-notify_container slds-is-relative">
                <div class="slds-notify slds-notify_toast slds-theme_${type}" role="alert">
                    <span class="slds-assistive-text">${type}</span>
                    <span class="slds-icon_container slds-icon-utility-${type} slds-m-right_small slds-no-flex slds-align-top" title="Description of icon when needed">
                        <svg class="slds-icon slds-icon_small" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#${type}')}" />
                        </svg>
                    </span>
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small">${msg}</h2>
                    </div>
                    <button class="close slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" title="Close">
                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#close')}" />
                        </svg>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                </div>
            </div>
        </div>`;
        
        cont.querySelector('.close').onclick = () => toaster.innerHTML = ''
        toaster.innerHTML = ''
        toaster.appendChild(cont.childNodes[0])
    }

    
  </script>

  </html>

</apex:page>

